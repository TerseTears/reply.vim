Describe repl
    Before each
        new!
    End

    After each
        bdelete!
        for b in term_list()
            execute 'bdelete!' b
        endfor
    End

    It can be closed with :bdelete!
        Repl node
        execute 'bdelete!' term_list()[0]
        Assert Empty(term_list())
        Assert True(WithTimeout(1, {-> empty(reply#lifecycle#running_repls())}))
    End

    It can be closed with :quit
        Repl node
        let b = term_list()[0]
        let w = bufwinnr(b)
        Assert NotEquals(w, -1)
        execute w . 'wincmd w'
        quit!
        Assert Empty(term_list())
        Assert True(WithTimeout(1, {-> empty(reply#lifecycle#running_repls())}))
    End

    It can be closed with :close from other window
        let prev = bufnr('%')
        Repl node
        execute bufwinnr(prev) . 'wincmd w'
        let b = term_list()[0]
        let w = bufwinnr(b)
        Assert NotEquals(w, -1)
        execute w . 'close!'
        Assert Equals(bufnr('%'), prev)
        " Buffer is still alive
        Assert NotEmpty(reply#lifecycle#running_repls())
    End
End
