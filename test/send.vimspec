Describe :ReplSend
    Before each
        call Cleanup()
        Repl node
        let term_winnr = winnr()
        call WithTimeout(1, {-> getline('.') !=# ''})
        wincmd p
    End

    It sends text to terminal window as arguments
        ReplSend 1 + 1
        execute term_winnr . 'wincmd w'
        Assert True(WithTimeout(1, {-> TermLastLine() > 1}))
        Assert Equals(GetTermLine(TermList()[0], 1, '$'), LinesInTerm('> 1 + 1', '2', '> '))
    End

    It sends current line to terminal window
        call setline('.', ['1 + 1'])
        ReplSend
        execute term_winnr . 'wincmd w'
        Assert True(WithTimeout(1, {-> TermLastLine() > 1}))
        Assert Equals(GetTermLine(TermList()[0], 1, '$'), LinesInTerm('> 1 + 1', '2', '> '))
    End

    It sends selected lines to terminal window in visual mode
        call setline('.', ['function hello(name) {', '  console.log("hello,", name);', '}', 'hello("Vim");'])
        normal! ggVGygv
        '<,'>ReplSend
        execute term_winnr . 'wincmd w'
        Assert True(WithTimeout(1, {-> TermLastLine() > 1}))
        let expected = LinesInTerm(
        \   '> function hello(name) {',
        \   '...   console.log("hello,", name);',
        \   '... }',
        \   'undefined',
        \   '> hello("Vim");',
        \   'hello, Vim',
        \   'undefined',
        \   '> ',
        \ )
        Assert Equals(GetTermLine(TermList()[0], 1, '$'), expected)
    End

    It does nothing when terminal is not started
        " Ensure all terminals are closed
        for b in TermList()
            execute 'bdelete!' b
        endfor
        call WithTimeout(1, {-> empty(reply#lifecycle#running_repls())})

        ReplSend foo
        Assert LastMessage('reply.vim: No REPL related to buffer #' . bufnr('%') . ' was found')
    End
End
