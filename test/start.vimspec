Describe :Repl
    Before each
        call Cleanup()
    End

    It does not open terminal when any REPL cannot be located
        Repl
        Assert LastMessage('reply.vim: No filetype is set for buffer')
        Assert Empty(TermList())
    End

    It opens REPL terminal for 'javascript' filetype
        setf javascript
        Repl
        Assert InTerminal()
        Assert True(WithTimeout(1, {-> getline('.') !=# ''}))
        Assert Equals(getline('.'), LineInTerm('> '))
        Assert TermTitle('reply: node')
        call TermSendkeys(bufnr('%'), "1 + 1\<CR>")
        Assert True(WithTimeout(1, {-> TermLastLine() > 1}))
        Assert Equals(GetTermLine(bufnr('%'), 1, '$'), LinesInTerm('> 1 + 1', '2', '> '))
    End

    It opens REPL terminal for 'node'
        Repl node
        Assert InTerminal()
        Assert True(WithTimeout(1, {-> getline('.') !=# ''}))
        Assert Equals(getline('.'), LineInTerm('> '))
        Assert TermTitle('reply: node')
        call TermSendkeys(bufnr('%'), "1 + 1\<CR>")
        Assert True(WithTimeout(1, {-> TermLastLine() > 1}))
        Assert Equals(GetTermLine(bufnr('%'), 1, '$'), LinesInTerm('> 1 + 1', '2', '> '))
    End

    It accepts command line options as rest of arguments
        Repl node -r path
        Assert InTerminal()
        Assert True(WithTimeout(1, {-> getline('.') !=# ''}))
        Assert Equals(getline('.'), LineInTerm('> '))
        Assert TermTitle('reply: node')
        call TermSendkeys(bufnr('%'), "path.join('foo', 'bar')\<CR>")
        Assert True(WithTimeout(1, {-> TermLastLine() > 1}))
        Assert Match(getline(TermLastLine()-1), "^'foo[\\/]bar'$")
    End

    It expands '%' in command line options as its full file path
        let file = AssetPath('repl-cmdopts-test.js')
        execute 'edit!' file
        Repl node -r %
        Assert InTerminal()
        Assert True(WithTimeout(1, {-> getline('.') !=# ''}))
        Assert Equals(getline('.'), LineInTerm('> '))
        Assert TermTitle('reply: node')
        call TermSendkeys(bufnr('%'), "global.foo()\<CR>")
        Assert True(WithTimeout(1, {-> TermLastLine() > 1}))
        Assert Equals(GetTermLine(bufnr('%'), 1, '$'), LinesInTerm('> global.foo()', "'foo'", '> '))
    End

    It accepts <mods> as prefix of the command
        let prev = bufnr('%')
        leftabove Repl node
        " Check window is split horizontally (the default behavior is vertical split)
        Assert NotEquals(prev, bufnr('%'))
        wincmd j
        Assert Equals(prev, bufnr('%'))
    End

    It sends selected strings in visual mode
        call setline('.', ['1 + 1'])
        let b = bufnr('%')
        normal! ggVGygv
        '<,'>Repl node

        " Cursor did not move
        Assert Equals(b, bufnr('%'))
        Assert Equals(mode(), 'n')

        let w = bufwinnr(TermList()[0])
        Assert NotEquals(w, -1)
        execute w . 'wincmd w'

        Assert True(WithTimeout(1, {-> TermLastLine() > 2}))
        Assert Equals(GetTermLine(bufnr('%'), 1, '$')[-3:-2], LinesInTerm('> 1 + 1', '2'))
    End

    It shows an error when a specified REPL is not defined
        Repl not-existing-repl-name
        Assert LastMessage("reply.vim: REPL 'not-existing-repl-name' is not defined or not installed")
    End

    " TODO: Test :Repl! to open multiple terminals from the same buffer
    " TODO: Test :Repl to open each terminal for each buffer
    " TODO: Test :Repl to regard g:reply_repls
End
