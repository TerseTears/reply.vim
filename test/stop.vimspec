Describe :ReplStop
    Before each
        call Cleanup()
    End

    It closes a terminal window and remove terminal buffer
        Repl node
        let b = bufnr('%')
        Assert Equals(TermList()[0], b)
        ReplStop
        Assert Empty(TermList())
        Assert Equals(bufwinnr(b), -1)
        Assert True(WithTimeout(1, {-> empty(reply#lifecycle#running_repls())}))
        Assert True(WithTimeout(1, {-> empty(reply#lifecycle#all_repls())}))
    End

    It closes a terminal window even in it
        Repl node
        let b = bufnr('%')
        Assert Equals(TermList()[0], b)
        let w = bufwinnr(b)
        Assert NotEquals(w, -1)
        execute w . 'wincmd w'
        ReplStop
        Assert Empty(TermList())
        Assert Equals(bufwinnr(b), -1)
        Assert True(WithTimeout(1, {-> empty(reply#lifecycle#running_repls())}))
        Assert True(WithTimeout(1, {-> empty(reply#lifecycle#all_repls())}))
    End

    It closes only the latest terminal window
        Repl node
        let b1 = bufnr('%')
        Repl! node
        let b2 = bufnr('%')
        ReplStop
        Assert Equals(TermList(), [b1])
        Assert Equals(bufwinnr(b2), -1)
        Assert True(WithTimeout(1, {-> len(reply#lifecycle#running_repls()) == 1}))
        Assert True(WithTimeout(1, {-> len(reply#lifecycle#all_repls()) == 1}))
    End

    It closes all terminal windows with bang
        let b = bufnr('%')
        Repl node
        let b1 = bufnr('%')
        Repl! node
        let b2 = bufnr('%')
        ReplStop!
        Assert Empty(TermList())
        Assert Equals(bufwinnr(b1), -1)
        Assert Equals(bufwinnr(b2), -1)
        " Back to the original buffer since all buffers were closed
        Assert Equals(bufnr('%'), b)
        Assert True(WithTimeout(1, {-> empty(reply#lifecycle#running_repls())}))
        Assert True(WithTimeout(1, {-> empty(reply#lifecycle#all_repls())}))
    End

    It does nothing but showing message when no REPL is running
        Assert Equals(len(reply#lifecycle#running_repls()), 0)
        redir => message
            ReplStop
        redir END
        Assert Contains(message, 'reply.vim: No REPL is running')

        " Check does nothing. It even doesn't show a message.
        ReplStop!
    End
End

Describe REPL
    Before each
        new!
    End

    After each
        bwipeout!
        for b in TermList()
            execute 'bwipeout!' b
        endfor
    End

    It can be closed with :bdelete!
        Repl node
        execute 'bdelete!' TermList()[0]
        Assert Empty(TermList())
        Assert True(WithTimeout(1, {-> empty(reply#lifecycle#running_repls())}))
    End

    It can be closed with :quit
        Repl node
        let b = TermList()[0]
        let w = bufwinnr(b)
        Assert NotEquals(w, -1)
        execute w . 'wincmd w'
        quit!
        Assert Empty(TermList())
        Assert True(WithTimeout(1, {-> empty(reply#lifecycle#running_repls())}))
    End

    It can be closed with :close from other window
        let prev = bufnr('%')
        Repl node
        execute bufwinnr(prev) . 'wincmd w'
        let b = TermList()[0]
        let w = bufwinnr(b)
        Assert NotEquals(w, -1)
        execute w . 'close!'
        Assert Equals(bufnr('%'), prev)
        " Buffer is still alive
        Assert NotEmpty(reply#lifecycle#running_repls())
    End
End
